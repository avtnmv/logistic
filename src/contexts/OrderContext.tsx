import React, { createContext, useContext, useState, ReactNode, useEffect } from 'react';
import { cargoService, transportService, Cargo, Transport, CargoInitData, TransportInitData, CreateCargoRequest, CreateTransportRequest } from '../services/orderService';
import { ApiError, ApiResponse } from '../services/apiClient';

interface OrderContextType {
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –≥—Ä—É–∑–æ–≤
  cargos: Cargo[];
  myCargos: Cargo[];
  cargoInitData: CargoInitData | null;
  cargoLoading: boolean;
  cargoError: string | null;
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞
  transports: Transport[];
  myTransports: Transport[];
  transportInitData: TransportInitData | null;
  transportLoading: boolean;
  transportError: string | null;
  
  // –û–±—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
  isLoading: boolean;
  error: string | null;
  
  // –ú–µ—Ç–æ–¥—ã –¥–ª—è –≥—Ä—É–∑–æ–≤
  loadCargos: (params?: any) => Promise<void>;
  loadMyCargos: (params?: any) => Promise<void>;
  createCargo: (data: CreateCargoRequest) => Promise<ApiResponse<Cargo>>;
  updateCargo: (id: string, data: Partial<CreateCargoRequest>) => Promise<ApiResponse<Cargo>>;
  deleteCargo: (id: string) => Promise<boolean>;
  upCargo: (id: string) => Promise<boolean>;
  loadCargoInitData: () => Promise<void>;
  
  // –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞
  loadTransports: (params?: any) => Promise<void>;
  loadMyTransports: (params?: any) => Promise<void>;
  createTransport: (data: CreateTransportRequest) => Promise<ApiResponse<Transport>>;
  updateTransport: (id: string, data: Partial<CreateTransportRequest>) => Promise<ApiResponse<Transport>>;
  deleteTransport: (id: string) => Promise<boolean>;
  upTransport: (id: string) => Promise<boolean>;
  loadTransportInitData: () => Promise<void>;
  
  // –£—Ç–∏–ª–∏—Ç—ã
  clearError: () => void;
  clearCargoError: () => void;
  clearTransportError: () => void;
}

const OrderContext = createContext<OrderContextType | undefined>(undefined);

export const useOrders = () => {
  const context = useContext(OrderContext);
  if (context === undefined) {
    throw new Error('useOrders must be used within an OrderProvider');
  }
  return context;
};

interface OrderProviderProps {
  children: ReactNode;
}

export const OrderProvider: React.FC<OrderProviderProps> = ({ children }) => {
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –≥—Ä—É–∑–æ–≤
  const [cargos, setCargos] = useState<Cargo[]>([]);
  const [myCargos, setMyCargos] = useState<Cargo[]>([]);
  const [cargoInitData, setCargoInitData] = useState<CargoInitData | null>(null);
  const [cargoLoading, setCargoLoading] = useState(false);
  const [cargoError, setCargoError] = useState<string | null>(null);
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞
  const [transports, setTransports] = useState<Transport[]>([]);
  const [myTransports, setMyTransports] = useState<Transport[]>([]);
  const [transportInitData, setTransportInitData] = useState<TransportInitData | null>(null);
  const [transportLoading, setTransportLoading] = useState(false);
  const [transportError, setTransportError] = useState<string | null>(null);
  
  // –û–±—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);

  // –ú–µ—Ç–æ–¥—ã –¥–ª—è –≥—Ä—É–∑–æ–≤
  const loadCargos = async (params: any = {}) => {
    setCargoLoading(true);
    setCargoError(null);
    try {
      console.log('üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º –≥—Ä—É–∑—ã —á–µ—Ä–µ–∑ API...');
      const response = await cargoService.getCargoList(params);
      console.log('üì° –û—Ç–≤–µ—Ç API –¥–ª—è –≥—Ä—É–∑–æ–≤:', response);
      if (response.status && response.data) {
        // API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞—Å—Å–∏–≤ –ø—Ä—è–º–æ –≤ response.data, –∞ –Ω–µ –≤ response.data.data
        const cargosArray = Array.isArray(response.data) ? response.data : response.data.data;
        console.log('‚úÖ –ì—Ä—É–∑—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', cargosArray?.length || 0);
        setCargos(cargosArray);
      } else {
        console.log('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≥—Ä—É–∑–æ–≤:', response.message);
        setCargoError(response.message || '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≥—Ä—É–∑–æ–≤');
      }
    } catch (err: any) {
      const errorMessage = err.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≥—Ä—É–∑–æ–≤';
      setCargoError(errorMessage);
    } finally {
      setCargoLoading(false);
    }
  };

  const loadMyCargos = async (params: any = {}) => {
    setCargoLoading(true);
    setCargoError(null);
    try {
      console.log('üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º –ú–û–ò –≥—Ä—É–∑—ã —á–µ—Ä–µ–∑ API...');
      const response = await cargoService.getMyCargoList(params);
      console.log('üì° –û—Ç–≤–µ—Ç API –¥–ª—è –ú–û–ò–• –≥—Ä—É–∑–æ–≤:', response);
      if (response.status && response.data) {
        // API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞—Å—Å–∏–≤ –ø—Ä—è–º–æ –≤ response.data, –∞ –Ω–µ –≤ response.data.data
        const cargosArray = Array.isArray(response.data) ? response.data : response.data.data;
        console.log('‚úÖ –ú–û–ò –≥—Ä—É–∑—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', cargosArray?.length || 0);
        setMyCargos(cargosArray);
      } else {
        console.log('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ú–û–ò–• –≥—Ä—É–∑–æ–≤:', response.message);
        setCargoError(response.message || '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∞—à–∏—Ö –≥—Ä—É–∑–æ–≤');
      }
    } catch (err: any) {
      const errorMessage = err.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∞—à–∏—Ö –≥—Ä—É–∑–æ–≤';
      setCargoError(errorMessage);
    } finally {
      setCargoLoading(false);
    }
  };

  const createCargo = async (data: CreateCargoRequest): Promise<ApiResponse<Cargo>> => {
    setIsLoading(true);
    setCargoError(null);
    try {
      const response = await cargoService.createCargo(data);
      if (response.status && response.data) {
        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –≥—Ä—É–∑ –≤ —Å–ø–∏—Å–æ–∫
        setCargos(prev => [response.data!, ...(prev || [])]);
        setMyCargos(prev => [response.data!, ...(prev || [])]);
      } else {
        setCargoError(response.message || '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä—É–∑–∞');
      }
      return response;
    } catch (err: any) {
      const errorMessage = err.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä—É–∑–∞';
      setCargoError(errorMessage);
      return {
        status: false,
        message: errorMessage,
        error: 'Unknown error',
        statusCode: 500
      };
    } finally {
      setIsLoading(false);
    }
  };

  const updateCargo = async (id: string, data: Partial<CreateCargoRequest>): Promise<ApiResponse<Cargo>> => {
    setIsLoading(true);
    setCargoError(null);
    try {
      const response = await cargoService.updateCargo({ id, ...data });
      if (response.status && response.data) {
        // –û–±–Ω–æ–≤–ª—è–µ–º –≥—Ä—É–∑ –≤ —Å–ø–∏—Å–∫–∞—Ö
        setCargos(prev => (prev || []).map(cargo => cargo.id === id ? response.data! : cargo));
        setMyCargos(prev => (prev || []).map(cargo => cargo.id === id ? response.data! : cargo));
      } else {
        setCargoError(response.message || '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≥—Ä—É–∑–∞');
      }
      return response;
    } catch (err: any) {
      const errorMessage = err.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≥—Ä—É–∑–∞';
      setCargoError(errorMessage);
      return {
        status: false,
        message: errorMessage,
        error: 'Unknown error',
        statusCode: 500
      };
    } finally {
      setIsLoading(false);
    }
  };

  const deleteCargo = async (id: string): Promise<boolean> => {
    setIsLoading(true);
    setCargoError(null);
    try {
      const response = await cargoService.deleteCargo(id);
      if (response.status) {
        // –£–¥–∞–ª—è–µ–º –≥—Ä—É–∑ –∏–∑ —Å–ø–∏—Å–∫–æ–≤
        setCargos(prev => (prev || []).filter(cargo => cargo.id !== id));
        setMyCargos(prev => (prev || []).filter(cargo => cargo.id !== id));
        return true;
      } else {
        setCargoError(response.message || '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –≥—Ä—É–∑–∞');
        return false;
      }
    } catch (err: any) {
      const errorMessage = err.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –≥—Ä—É–∑–∞';
      setCargoError(errorMessage);
      return false;
    } finally {
      setIsLoading(false);
    }
  };

  const upCargo = async (id: string): Promise<boolean> => {
    setIsLoading(true);
    setCargoError(null);
    try {
      const response = await cargoService.upCargo(id);
      if (response.status) {
        // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –≥—Ä—É–∑–æ–≤
        await loadCargos();
        await loadMyCargos();
        return true;
      } else {
        setCargoError(response.message || '–û—à–∏–±–∫–∞ –ø–æ–¥–Ω—è—Ç–∏—è –≥—Ä—É–∑–∞');
        return false;
      }
    } catch (err: any) {
      const errorMessage = err.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø–æ–¥–Ω—è—Ç–∏—è –≥—Ä—É–∑–∞';
      setCargoError(errorMessage);
      return false;
    } finally {
      setIsLoading(false);
    }
  };

  const loadCargoInitData = async () => {
    setCargoLoading(true);
    setCargoError(null);
    try {
      const response = await cargoService.initCargo();
      if (response.status && response.data) {
        setCargoInitData(response.data);
      } else {
        setCargoError(response.message || '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏');
      }
    } catch (err: any) {
      const errorMessage = err.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏';
      setCargoError(errorMessage);
    } finally {
      setCargoLoading(false);
    }
  };

  // –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ (–∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ –≥—Ä—É–∑–∞–º)
  const loadTransports = async (params: any = {}) => {
    setTransportLoading(true);
    setTransportError(null);
    try {
      console.log('üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç —á–µ—Ä–µ–∑ API...');
      const response = await transportService.getTransportList(params);
      console.log('üì° –û—Ç–≤–µ—Ç API –¥–ª—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞:', response);
      if (response.status && response.data) {
        // API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞—Å—Å–∏–≤ –ø—Ä—è–º–æ –≤ response.data, –∞ –Ω–µ –≤ response.data.data
        const transportsArray = Array.isArray(response.data) ? response.data : response.data.data;
        console.log('‚úÖ –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç –∑–∞–≥—Ä—É–∂–µ–Ω:', transportsArray?.length || 0);
        setTransports(transportsArray);
      } else {
        console.log('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞:', response.message);
        setTransportError(response.message || '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞');
      }
    } catch (err: any) {
      const errorMessage = err.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞';
      setTransportError(errorMessage);
    } finally {
      setTransportLoading(false);
    }
  };

  const loadMyTransports = async (params: any = {}) => {
    setTransportLoading(true);
    setTransportError(null);
    try {
      console.log('üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º –ú–û–ô —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç —á–µ—Ä–µ–∑ API...');
      const response = await transportService.getMyTransportList(params);
      console.log('üì° –û—Ç–≤–µ—Ç API –¥–ª—è –ú–û–ï–ì–û —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞:', response);
      if (response.status && response.data) {
        // API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞—Å—Å–∏–≤ –ø—Ä—è–º–æ –≤ response.data, –∞ –Ω–µ –≤ response.data.data
        const transportsArray = Array.isArray(response.data) ? response.data : response.data.data;
        console.log('‚úÖ –ú–û–ô —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç –∑–∞–≥—Ä—É–∂–µ–Ω:', transportsArray?.length || 0);
        setMyTransports(transportsArray);
      } else {
        console.log('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ú–û–ï–ì–û —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞:', response.message);
        setTransportError(response.message || '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∞—à–µ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞');
      }
    } catch (err: any) {
      const errorMessage = err.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∞—à–µ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞';
      setTransportError(errorMessage);
    } finally {
      setTransportLoading(false);
    }
  };

  const createTransport = async (data: CreateTransportRequest): Promise<ApiResponse<Transport>> => {
    setIsLoading(true);
    setTransportError(null);
    try {
      const response = await transportService.createTransport(data);
      if (response.status && response.data) {
        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç –≤ —Å–ø–∏—Å–æ–∫
        setTransports(prev => [response.data!, ...(prev || [])]);
        setMyTransports(prev => [response.data!, ...(prev || [])]);
      } else {
        setTransportError(response.message || '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞');
      }
      return response;
    } catch (err: any) {
      const errorMessage = err.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞';
      setTransportError(errorMessage);
      return {
        status: false,
        message: errorMessage,
        error: 'Unknown error',
        statusCode: 500
      };
    } finally {
      setIsLoading(false);
    }
  };

  const updateTransport = async (id: string, data: Partial<CreateTransportRequest>): Promise<ApiResponse<Transport>> => {
    setIsLoading(true);
    setTransportError(null);
    try {
      const response = await transportService.updateTransport({ id, ...data });
      if (response.status && response.data) {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç –≤ —Å–ø–∏—Å–∫–∞—Ö
        setTransports(prev => (prev || []).map(transport => transport.id === id ? response.data! : transport));
        setMyTransports(prev => (prev || []).map(transport => transport.id === id ? response.data! : transport));
      } else {
        setTransportError(response.message || '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞');
      }
      return response;
    } catch (err: any) {
      const errorMessage = err.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞';
      setTransportError(errorMessage);
      return {
        status: false,
        message: errorMessage,
        error: 'Unknown error',
        statusCode: 500
      };
    } finally {
      setIsLoading(false);
    }
  };

  const deleteTransport = async (id: string): Promise<boolean> => {
    setIsLoading(true);
    setTransportError(null);
    try {
      const response = await transportService.deleteTransport(id);
      if (response.status) {
        // –£–¥–∞–ª—è–µ–º —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç –∏–∑ —Å–ø–∏—Å–∫–æ–≤
        setTransports(prev => (prev || []).filter(transport => transport.id !== id));
        setMyTransports(prev => (prev || []).filter(transport => transport.id !== id));
        return true;
      } else {
        setTransportError(response.message || '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞');
        return false;
      }
    } catch (err: any) {
      const errorMessage = err.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞';
      setTransportError(errorMessage);
      return false;
    } finally {
      setIsLoading(false);
    }
  };

  const upTransport = async (id: string): Promise<boolean> => {
    setIsLoading(true);
    setTransportError(null);
    try {
      const response = await transportService.upTransport(id);
      if (response.status) {
        // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞
        await loadTransports();
        await loadMyTransports();
        return true;
      } else {
        setTransportError(response.message || '–û—à–∏–±–∫–∞ –ø–æ–¥–Ω—è—Ç–∏—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞');
        return false;
      }
    } catch (err: any) {
      const errorMessage = err.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø–æ–¥–Ω—è—Ç–∏—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞';
      setTransportError(errorMessage);
      return false;
    } finally {
      setIsLoading(false);
    }
  };

  const loadTransportInitData = async () => {
    setTransportLoading(true);
    setTransportError(null);
    try {
      const response = await transportService.initTransport();
      if (response.status && response.data) {
        setTransportInitData(response.data);
      } else {
        setTransportError(response.message || '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞');
      }
    } catch (err: any) {
      const errorMessage = err.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞';
      setTransportError(errorMessage);
    } finally {
      setTransportLoading(false);
    }
  };

  // –£—Ç–∏–ª–∏—Ç—ã
  const clearError = () => {
    setError(null);
  };

  const clearCargoError = () => {
    setCargoError(null);
  };

  const clearTransportError = () => {
    setTransportError(null);
  };

  const value: OrderContextType = {
    // –°–æ—Å—Ç–æ—è–Ω–∏–µ –≥—Ä—É–∑–æ–≤
    cargos,
    myCargos,
    cargoInitData,
    cargoLoading,
    cargoError,
    
    // –°–æ—Å—Ç–æ—è–Ω–∏–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞
    transports,
    myTransports,
    transportInitData,
    transportLoading,
    transportError,
    
    // –û–±—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    isLoading,
    error,
    
    // –ú–µ—Ç–æ–¥—ã –¥–ª—è –≥—Ä—É–∑–æ–≤
    loadCargos,
    loadMyCargos,
    createCargo,
    updateCargo,
    deleteCargo,
    upCargo,
    loadCargoInitData,
    
    // –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞
    loadTransports,
    loadMyTransports,
    createTransport,
    updateTransport,
    deleteTransport,
    upTransport,
    loadTransportInitData,
    
    // –£—Ç–∏–ª–∏—Ç—ã
    clearError,
    clearCargoError,
    clearTransportError,
  };

  return <OrderContext.Provider value={value}>{children}</OrderContext.Provider>;
};
