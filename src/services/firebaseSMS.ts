import { useState, useEffect } from 'react';
import { RecaptchaVerifier, signInWithPhoneNumber } from 'firebase/auth';
import { auth } from '../config/firebase';

// –§–ª–∞–≥ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è mock SMS (–≤—Ä–µ–º–µ–Ω–Ω–æ, –ø–æ–∫–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –±–∏–ª–ª–∏–Ω–≥ Firebase)
const USE_MOCK_SMS = true;

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è Firebase SMS –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
interface FirebaseSMSProps {
  phone: string;
  onVerificationSuccess: (idToken: string) => void;
  onError: (error: string) => void;
  disabled?: boolean;
}

// –•—É–∫ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è Firebase SMS
export const useFirebaseSMS = (phone: string, onVerificationSuccess: (idToken: string) => void, onError: (error: string) => void) => {
  const [isLoading, setIsLoading] = useState(false);
  const [countdown, setCountdown] = useState(0);
  const [confirmationResult, setConfirmationResult] = useState<any>(null);
  const [recaptchaVerifier, setRecaptchaVerifier] = useState<RecaptchaVerifier | null>(null);

  // –û–±—Ä–∞—Ç–Ω—ã–π –æ—Ç—Å—á–µ—Ç –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ SMS
  useEffect(() => {
    let interval: NodeJS.Timeout;
    if (countdown > 0) {
      interval = setInterval(() => {
        setCountdown(prev => prev - 1);
      }, 1000);
    }
    return () => clearInterval(interval);
  }, [countdown]);

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è reCAPTCHA
  const ensureRecaptcha = async (): Promise<RecaptchaVerifier> => {
    try {
      // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π reCAPTCHA
      if (recaptchaVerifier) {
        recaptchaVerifier.clear();
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç–ª–µ–º–µ–Ω—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
      const recaptchaContainer = document.getElementById('recaptcha-container');
      if (!recaptchaContainer) {
        throw new Error('reCAPTCHA –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω');
      }
      
      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π reCAPTCHA
      const verifier = new RecaptchaVerifier(auth, 'recaptcha-container', { 
        size: 'invisible' 
      });
      
      // –†–µ–Ω–¥–µ—Ä–∏–º reCAPTCHA
      await verifier.render();
      setRecaptchaVerifier(verifier);
      
      return verifier;
    } catch (error: any) {
      console.error('reCAPTCHA initialization error:', error);
      throw new Error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ reCAPTCHA');
    }
  };

  // –û—Ç–ø—Ä–∞–≤–∫–∞ SMS —á–µ—Ä–µ–∑ Firebase
  const sendSMS = async () => {
    if (!phone) return;

    try {
      setIsLoading(true);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞
      if (!phone.startsWith('+')) {
        throw new Error('–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ (–Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å +)');
      }

      // Mock SMS –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–≤—Ä–µ–º–µ–Ω–Ω–æ, –ø–æ–∫–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –±–∏–ª–ª–∏–Ω–≥ Firebase)
      if (USE_MOCK_SMS) {
        console.log('üîß Mock SMS –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –Ω–æ–º–µ—Ä:', phone);
        console.log('üîß –¢–µ—Å—Ç–æ–≤—ã–π –∫–æ–¥: 123456');
        
        // –°–æ–∑–¥–∞–µ–º mock confirmation result
        const mockConfirmationResult = {
          confirm: async (code: string) => {
            if (code === '123456') {
              // –í–æ–∑–≤—Ä–∞—â–∞–µ–º mock –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å idToken
              return {
                user: {
                  getIdToken: async () => 'mock_id_token_' + Date.now()
                }
              };
            } else {
              throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥');
            }
          }
        };
        
        setConfirmationResult(mockConfirmationResult);
        setCountdown(60);
        console.log('‚úÖ Mock SMS —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω');
        return;
      }

      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º reCAPTCHA
      const verifier = await ensureRecaptcha();
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º SMS
      const result = await signInWithPhoneNumber(auth, phone, verifier);
      setConfirmationResult(result);
      
      setCountdown(60); // 60 —Å–µ–∫—É–Ω–¥ –¥–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
      
      console.log('SMS sent successfully', { phone });
      
    } catch (error: any) {
      console.error('SMS sending error:', error);
      
      // –û—á–∏—â–∞–µ–º reCAPTCHA –ø—Ä–∏ –æ—à–∏–±–∫–µ
      if (recaptchaVerifier) {
        try {
          recaptchaVerifier.clear();
        } catch (e) {
          console.error('Error clearing reCAPTCHA:', e);
        }
        setRecaptchaVerifier(null);
      }
      
      onError(error.message || '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ SMS');
    } finally {
      setIsLoading(false);
    }
  };

  // –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è SMS –∫–æ–¥–∞
  const verifyCode = async (code: string) => {
    if (!confirmationResult || !code) return;

    try {
      setIsLoading(true);
      
      // –í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –∫–æ–¥
      const cred = await confirmationResult.confirm(code);
      
      // –ü–æ–ª—É—á–∞–µ–º idToken
      const idToken = await cred.user.getIdToken();
      
      console.log('Code verified successfully', { 
        uid: cred.user.uid,
        idToken: idToken.slice(0, 20) + '...'
      });
      
      // –í—ã–∑—ã–≤–∞–µ–º callback —Å idToken
      onVerificationSuccess(idToken);
      
    } catch (error: any) {
      console.error('Code verification error:', error);
      onError(error.message || '–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è');
    } finally {
      setIsLoading(false);
    }
  };

  return {
    sendSMS,
    verifyCode,
    isLoading,
    countdown,
    canResend: countdown === 0 && !isLoading
  };
};

export default useFirebaseSMS;